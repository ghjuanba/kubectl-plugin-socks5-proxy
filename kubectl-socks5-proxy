#!/usr/bin/env bash
#
# A kubectl plugin that creates a local SOCKS5 proxy through which you can access to pods/services in a Kubernetes cluster
#

[ -n "$DEBUG" ] && set -x -e

MAX_POD_CREATION_TIME=10  # unit: second
DEFAULT_POD_PORT=1080
DEFAULT_LOCAL_PORT=4444
DEFAULT_NAME=psocks${DEFAULT_POD_PORT}
DEFAULT_PROXY_NAMESPACE=bi-prod
DEFAULT_PROXY_IMAGE=serjs/go-socks5-proxy
DEFAULT_CONTEXT=$( kubectl config current-context )

_echo(){
  echo "$@" >&2
}

help(){
  _echo "Usage: "
  _echo "  kubectl socks5-proxy"
  _echo ""
  options
}

options(){
  cat << EOF
Options:
  -n, --namespace <namespace>   Namespace to create SOCKS5 proxy server in
                                Default: ${DEFAULT_PROXY_NAMESPACE}

  -p, --pod-port <pod port>     SOCKS5 proxy server POD port
                                Default: ${DEFAULT_POD_PORT}

  -N, --name <pod name>         Name to give the pod in the cluster
                                Default: ${DEFAULT_NAME}

  -i, --image <socks5 image>    Set the image used as socks5 proxy server
                                Default: ${DEFAULT_PROXY_IMAGE}

  --skip-cleanup-proxy          Skip cleaning up SOCKS5 proxy pod
                                Default: Cleaning up SOCKS5 proxy pod at the end

  -c, --context <k8s context>   Set context to run the proxy
                                DEFAULT: Current context set in kubectl

  -l, --local-port <local port> Local port to be forwarded to the SOCKS5 proxy server Pod port
                                A client connects to this port, then the connection is forwarded to the
                                SOCKS5 proxy server, which is then forwarded to the destination server
                                Default: ${DEFAULT_LOCAL_PORT}

  -h, --help                    Show this message
EOF
}

cleanup_proxy(){
  local namespace="$1"
  local podname="$2"
  local context="$3"
  _echo "Cleaning up SOCKS5 proxy server (Pod) ([${context}]--[${namespace}]--${podname})..."
  kubectl --context=${context} delete pod ${podname} -n ${namespace}
}

run_proxy(){
  local namespace="$1"
  local podport="$2"
  local podname="$3"
  local image="$4"
  local localport="$5"
  local context="$6"

  # Install a SOCKS5 proxy server if not yet installed
  r=$(kubectl --context=${context} get pod ${podname} -n ${namespace} 2>/dev/null | tail -1 | awk '{print $1}')
  if [ "${r}" != "${podname}" ];then
    _echo "Creating yaml file..."
    cat > /tmp/proxysocks5.yaml <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: ${podname}
  labels:
    env: test
spec:
  containers:
  - name: ${podname}
    image: ${image}
    ports:
    - containerPort: ${podport}
  nodeSelector:
    "kubernetes.io/os": linux
EOF
    _echo "Creating SOCKS5 Proxy (Pod)..."
    kubectl --context=${context} apply -n ${namespace} -f /tmp/proxysocks5.yaml
    # Wait until SOCKS5 proxy server gets ready
    c=1
    while [[ ${c} -le ${MAX_POD_CREATION_TIME} ]];
    do
      pod_status=$(kubectl --context=${context} get pod ${podname} -n ${namespace} 2>/dev/null | tail -1 | awk '{print $3}')
      if [ "${pod_status}" = "Running" ]; then
        break
      fi
      (( c++ ))
      sleep 1
    done
  fi

  _echo "Starting a local SOCKS5 Proxy (localhost:${localport}) --> ([${context}]--[${namespace}]--${podname}:${podport})..."
  _echo ""
  _echo "The proxy Pod can be cleaned up with ^C (if not in background),"
  _echo "or with a command \"kubectl --context=${context} delete pod ${podname} -n ${namespace}\""
  _echo ""
  # Setup portforward
  kubectl --context=${context} port-forward -n ${namespace} ${podname} ${localport}:${podport}
}


plugin_main() {
  skip_cleanup_proxy=no
  while [ $# -gt 0 ] ; do
    nSkip=1
    case $1 in
      "-h" | "--help")
        help
        exit 0
      ;;
      "--skip-cleanup-proxy")
        skip_cleanup_proxy=yes
      ;;
      "-n" | "--namespace" )
        namespace=$2
        nSkip=2
      ;;
      "-p" | "--pod-port" )
        podport=$2
        nSkip=2
      ;;
      "-N" | "--name" )
        podname=$2
        nSkip=2
      ;;
      "-i" | "--image" )
        image=$2
        nSkip=2
      ;;
      "-c" | "--context" )
        context=$2
        nSkip=2
      ;;
      "-l" | "--local-port" )
        localport=$2
        nSkip=2
      ;;
      *)
        help >&2
        exit 1
      ;;
    esac
    shift $nSkip
  done

  type kubectl &>/dev/null || {
    _echo "Error: missing kubectl command" >&2
    _echo "Please install kubectl (https://kubernetes.io/docs/tasks/tools/install-kubectl/)" >&2
    exit 1
  }

  if [ ! -n "${context}" ]; then
    context=${DEFAULT_CONTEXT}
  fi
  _echo "using: context=${context}"

  if [[ -z "${namespace}" ]]; then
    namespace=${DEFAULT_PROXY_NAMESPACE}
  fi
  _echo "using: namespace=${namespace}"

  if [ ! -n "${podport}" ]; then
    podport=${DEFAULT_POD_PORT}
  fi
  _echo "using: POD port=${podport}"

  if [ ! -n "${localport}" ]; then
    localport=${DEFAULT_LOCAL_PORT}
  fi
  _echo "using: LOCAL port=${localport}"

  if [[ -z "${podname}" ]]; then
    podname=${DEFAULT_NAME}
  fi
  _echo "using: name=${podname}"

  if [ ! -n "${image}" ]; then
    image=${DEFAULT_PROXY_IMAGE}
  fi
  _echo "using: image=${image}"

  run_proxy "${namespace}" "${podport}" "${podname}" "${image}" "${localport}" "${context}"

  # Cleaning up SOCKS5 proxy server if needed
  if [ "${skip_cleanup_proxy}" = "no" ]; then
    cleanup_proxy "${namespace}" "${podname}" "${context}"

  fi
}

plugin_main "$@"
